source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
create = h5createFile("example.h5")
create
create = h5createGroup("example.h5","foo")
create = h5createGroup("example.h5","baa")
create = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B = array(seq(0.1, 2.0, by=0.1), dim=(5,2,2))
B = array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L, seq(0,1,length.out = 5), c("ab","cde","fghi","a","s"), stringsAsFactors = FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readdf = h5read("example.h5","df")
readdf
h5write(c(12,13,15),"example.h5","foo/A", index=list(1:3,2))
h5read("example.h5","foo/A")
q()
install.packages("ggplot2")
install.packages("lattice")
library (nlme)
library (lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library (datasets)
data("airquality")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library (lattice)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot
qplot()
library (ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("knitr")
install.packages("markdown")
install.packages("slidify")
install.packages("xtable")
q()
library(datasets)
data(iris)
?iris
str(iris)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
str(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
debug(ls)
ls
ls()
q()
install.packages("impute")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
q()
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-"5:20"
-(5:20)
select(-(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,
| r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 && r_os =="linux_gnu")
filter(cran, size > 100500, r_os =="linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran,country, desc(r_version), ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(tidyr)
students
?gather
gather(students, sez, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
?unique
submit
submit()
submit()
submit()
gradebook
submit()
passed
falied
failed
passed <- mutated(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y ~ x))
library(datasets)
data("mtcars")
str(mtcars)
coef(lm(mtcars$mpg ~ mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
scale(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm (x ~ y))
coef(lm (y ~ x))
coef(lm (y ~ x -1))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
?cor
q()
install.packages("shiny")
install.packages("manipulate")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("googleVis")
install_github('rstudio/shinyapp')
install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='yisongtao',
token='C6844DD3DD436C5E024F8B7BA84A6EB4',
secret='<SECRET>')
shinyapps::setAccountInfo(name='yisongtao', token='C6844DD3DD436C5E024F8B7BA84A6EB4', secret='q0uargOtim2uQajkOqd496rjrqidht+FxxSePSW2')
install_github('ropensci/plotly')
install.packages("viridis")
install_github('ropensci/plotly')
library(plotly)
plotly:::verify("ystao")
plotly:::verify("username")
Sys.setenv("plotly_username"="ystao")
Sys.setenv("plotly_api_key"="o2nnizuapm")
Sys.setenv("plotly_api_key"="u2nc8ced0u")
q()
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages(caret)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_str <- grep("^IL", colnames(training), value = TRUE)
preProc <- preProcess(training[, IL_str], method = "pca", thresh = 0.9)
preProc$rotation
q()
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y = as.factor(vowel.train$y)
vowel.test$y = as.factor(vowel.test$y)
set.seed(33833)
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
install.packages("randomForest")
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
library("randomForest")
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
library(caret)
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
install.packages("e1071")
vowel.rfmodel <- train(y ~ ., data=vowel.train, method="rf")
varImp(vowel.rfmodel)
q()
setwd("~/Coursera/RegrssionModel")
q()
